name: Build Multi-Platform Releases

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: x64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: macos
            arch: x64
            runner: macos-13
          - os: macos
            arch: arm64
            runner: macos-14
          - os: windows
            arch: x64
            runner: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.18.4'
        otp-version: '28.0.2'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-${{ matrix.arch }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Build release
      run: MIX_ENV=prod mix release --overwrite

    - name: Create platform archive
      shell: bash
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        VERSION=${VERSION#v}  # Remove 'v' prefix
        
        ARCHIVE_NAME="lingua-${{ matrix.os }}-${{ matrix.arch }}-${VERSION}.tar.gz"
        
        # Copy release archive with platform-specific name
        cp "_build/prod/lingua-${VERSION}.tar.gz" "$ARCHIVE_NAME"
        
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create install script
      shell: bash
      run: |
        cat > "install-${{ matrix.os }}-${{ matrix.arch }}.sh" << 'EOF'
        #!/bin/bash
        set -e
        
        # Lingua Installation Script for ${{ matrix.os }}-${{ matrix.arch }}
        echo "🌯 Installing Lingua ${{ env.VERSION }} for ${{ matrix.os }}-${{ matrix.arch }}"
        
        # Detect platform
        CURRENT_OS="unknown"
        CURRENT_ARCH="unknown"
        
        if [[ "$OSTYPE" == "darwin"* ]]; then
            CURRENT_OS="macos"
        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
            CURRENT_OS="linux"
        elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
            CURRENT_OS="windows"
        fi
        
        if [[ $(uname -m) == "x86_64" ]]; then
            CURRENT_ARCH="x64"
        elif [[ $(uname -m) == "arm64" ]] || [[ $(uname -m) == "aarch64" ]]; then
            CURRENT_ARCH="arm64"
        fi
        
        if [[ "$CURRENT_OS" != "${{ matrix.os }}" ]] || [[ "$CURRENT_ARCH" != "${{ matrix.arch }}" ]]; then
            echo "⚠️  Warning: This installer is for ${{ matrix.os }}-${{ matrix.arch }}, but detected $CURRENT_OS-$CURRENT_ARCH"
            read -p "Continue anyway? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
        
        # Install directories
        INSTALL_DIR="/usr/local/lingua"
        BIN_DIR="/usr/local/bin"
        
        # Create install directory
        echo "📦 Creating installation directory..."
        sudo mkdir -p "$INSTALL_DIR"
        
        # Download or use provided release
        if [ -n "$LINGUA_RELEASE_FILE" ] && [ -f "$LINGUA_RELEASE_FILE" ]; then
            echo "📁 Using provided release file: $LINGUA_RELEASE_FILE"
            sudo tar -xzf "$LINGUA_RELEASE_FILE" -C "$INSTALL_DIR"
        else
            RELEASE_URL="https://github.com/middleFiddle/lingua/releases/download/v${{ env.VERSION }}/lingua-${{ matrix.os }}-${{ matrix.arch }}-${{ env.VERSION }}.tar.gz"
            echo "⬇️  Downloading Lingua release..."
            echo "   $RELEASE_URL"
            
            if command -v curl >/dev/null 2>&1; then
                curl -L "$RELEASE_URL" | sudo tar -xzf - -C "$INSTALL_DIR"
            elif command -v wget >/dev/null 2>&1; then
                wget -O - "$RELEASE_URL" | sudo tar -xzf - -C "$INSTALL_DIR"
            else
                echo "❌ Neither curl nor wget found. Cannot download release."
                exit 1
            fi
        fi
        
        # Create CLI wrapper
        echo "🔧 Creating CLI wrapper..."
        sudo tee "$BIN_DIR/lingua" > /dev/null << 'CLI_EOF'
        #!/bin/bash
        LINGUA_HOME="/usr/local/lingua"
        COMMAND="$1"
        shift
        
        case "$COMMAND" in
            "extract"|"translate"|"generate"|"setup")
                exec "$LINGUA_HOME/bin/lingua" eval "Lingua.CLI.main([\"$COMMAND\"] ++ System.argv())" -- "$@"
                ;;
            "--help"|"-h"|"help")
                exec "$LINGUA_HOME/bin/lingua" eval "Lingua.CLI.main([\"--help\"])"
                ;;
            "--version"|"-v"|"version")
                exec "$LINGUA_HOME/bin/lingua" eval "Lingua.CLI.main([\"--version\"])"
                ;;
            "")
                exec "$LINGUA_HOME/bin/lingua" eval "Lingua.CLI.main([])"
                ;;
            *)
                echo "Unknown command: $COMMAND"
                exec "$LINGUA_HOME/bin/lingua" eval "Lingua.CLI.main([\"--help\"])"
                ;;
        esac
        CLI_EOF
        
        # Make wrapper executable
        sudo chmod +x "$BIN_DIR/lingua"
        
        # Test installation
        echo "✅ Testing installation..."
        if "$BIN_DIR/lingua" --version; then
            echo ""
            echo "🎉 Lingua installed successfully!"
            echo ""
            echo "🚀 Quick Start:"
            echo "   cd your-project"
            echo "   lingua setup"
            echo "   lingua extract --source-dir src --pattern-type i18n"
            echo "   lingua translate --to es,fr,de"
            echo "   lingua generate --output-template \"public/locales/{lang}/{filename}.json\""
        else
            echo "❌ Installation test failed"
            exit 1
        fi
        EOF
        
        chmod +x "install-${{ matrix.os }}-${{ matrix.arch }}.sh"

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lingua-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          ${{ env.ARCHIVE_NAME }}
          install-${{ matrix.os }}-${{ matrix.arch }}.sh

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          lingua-*/lingua-*.tar.gz
          lingua-*/install-*.sh
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}